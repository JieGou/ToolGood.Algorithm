//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from math.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ImathVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class mathBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, ImathVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="mathParser.prog"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitProg([NotNull] mathParser.ProgContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CEILING_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCEILING_fun([NotNull] mathParser.CEILING_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FACT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFACT_fun([NotNull] mathParser.FACT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>REGEXREPALCE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitREGEXREPALCE_fun([NotNull] mathParser.REGEXREPALCE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>AddSub_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAddSub_fun([NotNull] mathParser.AddSub_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>AVERAGEIF_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAVERAGEIF_fun([NotNull] mathParser.AVERAGEIF_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CRC16_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCRC16_fun([NotNull] mathParser.CRC16_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>RIGHT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRIGHT_fun([NotNull] mathParser.RIGHT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TOLOWER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTOLOWER_fun([NotNull] mathParser.TOLOWER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>QUARTILE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitQUARTILE_fun([NotNull] mathParser.QUARTILE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FINV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFINV_fun([NotNull] mathParser.FINV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NOT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNOT_fun([NotNull] mathParser.NOT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>DAYS360_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDAYS360_fun([NotNull] mathParser.DAYS360_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>WEEKNUM_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitWEEKNUM_fun([NotNull] mathParser.WEEKNUM_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>POISSON_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPOISSON_fun([NotNull] mathParser.POISSON_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ISREGEX_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitISREGEX_fun([NotNull] mathParser.ISREGEX_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PERCENTILE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPERCENTILE_fun([NotNull] mathParser.PERCENTILE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SHA256_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSHA256_fun([NotNull] mathParser.SHA256_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HYPGEOMDIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHYPGEOMDIST_fun([NotNull] mathParser.HYPGEOMDIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PERMUT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPERMUT_fun([NotNull] mathParser.PERMUT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TRIMSTART_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTRIMSTART_fun([NotNull] mathParser.TRIMSTART_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>RMB_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRMB_fun([NotNull] mathParser.RMB_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CLEAN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCLEAN_fun([NotNull] mathParser.CLEAN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LOWER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLOWER_fun([NotNull] mathParser.LOWER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>OR_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOR_fun([NotNull] mathParser.OR_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NORMSINV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNORMSINV_fun([NotNull] mathParser.NORMSINV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LEFT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLEFT_fun([NotNull] mathParser.LEFT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LOGINV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLOGINV_fun([NotNull] mathParser.LOGINV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>WORKDAY_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitWORKDAY_fun([NotNull] mathParser.WORKDAY_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ISERROR_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitISERROR_fun([NotNull] mathParser.ISERROR_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>JIS_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJIS_fun([NotNull] mathParser.JIS_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CRC32_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCRC32_fun([NotNull] mathParser.CRC32_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LCM_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLCM_fun([NotNull] mathParser.LCM_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HARMEAN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHARMEAN_fun([NotNull] mathParser.HARMEAN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NORMINV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNORMINV_fun([NotNull] mathParser.NORMINV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>GAMMAINV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGAMMAINV_fun([NotNull] mathParser.GAMMAINV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SQRT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSQRT_fun([NotNull] mathParser.SQRT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>DEGREES_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDEGREES_fun([NotNull] mathParser.DEGREES_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MROUND_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMROUND_fun([NotNull] mathParser.MROUND_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>DATEDIF_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDATEDIF_fun([NotNull] mathParser.DATEDIF_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TRIMEND_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTRIMEND_fun([NotNull] mathParser.TRIMEND_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CRC8_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCRC8_fun([NotNull] mathParser.CRC8_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>INT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitINT_fun([NotNull] mathParser.INT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SUMIF_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSUMIF_fun([NotNull] mathParser.SUMIF_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PI_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPI_fun([NotNull] mathParser.PI_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>YEAR_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitYEAR_fun([NotNull] mathParser.YEAR_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SQRTPI_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSQRTPI_fun([NotNull] mathParser.SQRTPI_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CONCATENATE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCONCATENATE_fun([NotNull] mathParser.CONCATENATE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>COUNT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCOUNT_fun([NotNull] mathParser.COUNT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FALSE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFALSE_fun([NotNull] mathParser.FALSE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HTMLENCODE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHTMLENCODE_fun([NotNull] mathParser.HTMLENCODE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>BASE64URLTOTEXT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitBASE64URLTOTEXT_fun([NotNull] mathParser.BASE64URLTOTEXT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LOG10_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLOG10_fun([NotNull] mathParser.LOG10_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ISTEXT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitISTEXT_fun([NotNull] mathParser.ISTEXT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NEGBINOMDIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNEGBINOMDIST_fun([NotNull] mathParser.NEGBINOMDIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NETWORKDAYS_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNETWORKDAYS_fun([NotNull] mathParser.NETWORKDAYS_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FACTDOUBLE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFACTDOUBLE_fun([NotNull] mathParser.FACTDOUBLE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TIMEVALUE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTIMEVALUE_fun([NotNull] mathParser.TIMEVALUE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>AVEDEV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAVEDEV_fun([NotNull] mathParser.AVEDEV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>GUID_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGUID_fun([NotNull] mathParser.GUID_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>JSON_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJSON_fun([NotNull] mathParser.JSON_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FIXED_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFIXED_fun([NotNull] mathParser.FIXED_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>GetJsonValue_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGetJsonValue_fun([NotNull] mathParser.GetJsonValue_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TINV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTINV_fun([NotNull] mathParser.TINV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>EDATE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEDATE_fun([NotNull] mathParser.EDATE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>GEOMEAN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGEOMEAN_fun([NotNull] mathParser.GEOMEAN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>VAR_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitVAR_fun([NotNull] mathParser.VAR_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SIGN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSIGN_fun([NotNull] mathParser.SIGN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>EOMONTH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEOMONTH_fun([NotNull] mathParser.EOMONTH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FLOOR_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFLOOR_fun([NotNull] mathParser.FLOOR_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HOUR_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHOUR_fun([NotNull] mathParser.HOUR_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LEN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLEN_fun([NotNull] mathParser.LEN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ACOS_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitACOS_fun([NotNull] mathParser.ACOS_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ISNULLORWHITESPACE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitISNULLORWHITESPACE_fun([NotNull] mathParser.ISNULLORWHITESPACE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NUM_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNUM_fun([NotNull] mathParser.NUM_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>COSH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCOSH_fun([NotNull] mathParser.COSH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>QUOTIENT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitQUOTIENT_fun([NotNull] mathParser.QUOTIENT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SEARCH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSEARCH_fun([NotNull] mathParser.SEARCH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ROUNDUP_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitROUNDUP_fun([NotNull] mathParser.ROUNDUP_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>COMBIN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCOMBIN_fun([NotNull] mathParser.COMBIN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CODE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCODE_fun([NotNull] mathParser.CODE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ASINH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitASINH_fun([NotNull] mathParser.ASINH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SIN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSIN_fun([NotNull] mathParser.SIN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SUBSTRING_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSUBSTRING_fun([NotNull] mathParser.SUBSTRING_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>RANDBETWEEN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRANDBETWEEN_fun([NotNull] mathParser.RANDBETWEEN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>AVERAGE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAVERAGE_fun([NotNull] mathParser.AVERAGE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LOG_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLOG_fun([NotNull] mathParser.LOG_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HMACSHA512_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHMACSHA512_fun([NotNull] mathParser.HMACSHA512_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>STDEVP_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSTDEVP_fun([NotNull] mathParser.STDEVP_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>Array_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitArray_fun([NotNull] mathParser.Array_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ROUND_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitROUND_fun([NotNull] mathParser.ROUND_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>EXP_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEXP_fun([NotNull] mathParser.EXP_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>COUNTIF_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCOUNTIF_fun([NotNull] mathParser.COUNTIF_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>VARP_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitVARP_fun([NotNull] mathParser.VARP_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>REMOVEEND_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitREMOVEEND_fun([NotNull] mathParser.REMOVEEND_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>DATE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDATE_fun([NotNull] mathParser.DATE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PARAMETER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPARAMETER_fun([NotNull] mathParser.PARAMETER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SPLIT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSPLIT_fun([NotNull] mathParser.SPLIT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>URLDECODE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitURLDECODE_fun([NotNull] mathParser.URLDECODE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>IFTEXT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitIFTEXT_fun([NotNull] mathParser.IFTEXT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LARGE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLARGE_fun([NotNull] mathParser.LARGE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TOUPPER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTOUPPER_fun([NotNull] mathParser.TOUPPER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>VALUE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitVALUE_fun([NotNull] mathParser.VALUE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>DAY_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDAY_fun([NotNull] mathParser.DAY_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>WEIBULL_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitWEIBULL_fun([NotNull] mathParser.WEIBULL_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TRYJSON_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTRYJSON_fun([NotNull] mathParser.TRYJSON_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HMACSHA256_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHMACSHA256_fun([NotNull] mathParser.HMACSHA256_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>BINOMDIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitBINOMDIST_fun([NotNull] mathParser.BINOMDIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>Judge_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJudge_fun([NotNull] mathParser.Judge_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>DEVSQ_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDEVSQ_fun([NotNull] mathParser.DEVSQ_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MODE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMODE_fun([NotNull] mathParser.MODE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>BETAINV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitBETAINV_fun([NotNull] mathParser.BETAINV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MAX_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMAX_fun([NotNull] mathParser.MAX_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MINUTE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMINUTE_fun([NotNull] mathParser.MINUTE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TAN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTAN_fun([NotNull] mathParser.TAN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>IFERROR_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitIFERROR_fun([NotNull] mathParser.IFERROR_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FDIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFDIST_fun([NotNull] mathParser.FDIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>INDEXOF_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitINDEXOF_fun([NotNull] mathParser.INDEXOF_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>UPPER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitUPPER_fun([NotNull] mathParser.UPPER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HTMLDECODE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHTMLDECODE_fun([NotNull] mathParser.HTMLDECODE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>EXPONDIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEXPONDIST_fun([NotNull] mathParser.EXPONDIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>REMOVEBOTH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitREMOVEBOTH_fun([NotNull] mathParser.REMOVEBOTH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SMALL_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSMALL_fun([NotNull] mathParser.SMALL_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ODD_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitODD_fun([NotNull] mathParser.ODD_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TEXTTOBASE64_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTEXTTOBASE64_fun([NotNull] mathParser.TEXTTOBASE64_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MID_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMID_fun([NotNull] mathParser.MID_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PERCENTRANK_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPERCENTRANK_fun([NotNull] mathParser.PERCENTRANK_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>STDEV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSTDEV_fun([NotNull] mathParser.STDEV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NORMSDIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNORMSDIST_fun([NotNull] mathParser.NORMSDIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ISNUMBER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitISNUMBER_fun([NotNull] mathParser.ISNUMBER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LASTINDEXOF_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLASTINDEXOF_fun([NotNull] mathParser.LASTINDEXOF_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOD_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOD_fun([NotNull] mathParser.MOD_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CHAR_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCHAR_fun([NotNull] mathParser.CHAR_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>REGEX_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitREGEX_fun([NotNull] mathParser.REGEX_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TEXTTOBASE64URL_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTEXTTOBASE64URL_fun([NotNull] mathParser.TEXTTOBASE64URL_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MD5_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMD5_fun([NotNull] mathParser.MD5_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>REPLACE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitREPLACE_fun([NotNull] mathParser.REPLACE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ACOSH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitACOSH_fun([NotNull] mathParser.ACOSH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ASC_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitASC_fun([NotNull] mathParser.ASC_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>COS_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCOS_fun([NotNull] mathParser.COS_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLN_fun([NotNull] mathParser.LN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>STRING_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSTRING_fun([NotNull] mathParser.STRING_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HMACMD5_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHMACMD5_fun([NotNull] mathParser.HMACMD5_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PRODUCT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPRODUCT_fun([NotNull] mathParser.PRODUCT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>EXACT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEXACT_fun([NotNull] mathParser.EXACT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SUMSQ_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSUMSQ_fun([NotNull] mathParser.SUMSQ_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SUM_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSUM_fun([NotNull] mathParser.SUM_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SECOND_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSECOND_fun([NotNull] mathParser.SECOND_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>GAMMADIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGAMMADIST_fun([NotNull] mathParser.GAMMADIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TODAY_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTODAY_fun([NotNull] mathParser.TODAY_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ATAN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitATAN_fun([NotNull] mathParser.ATAN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TRIM_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTRIM_fun([NotNull] mathParser.TRIM_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>P_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitP_fun([NotNull] mathParser.P_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>RADIANS_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRADIANS_fun([NotNull] mathParser.RADIANS_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>GAMMALN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGAMMALN_fun([NotNull] mathParser.GAMMALN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TEXT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTEXT_fun([NotNull] mathParser.TEXT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FISHER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFISHER_fun([NotNull] mathParser.FISHER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>AND_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAND_fun([NotNull] mathParser.AND_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MULTINOMIAL_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMULTINOMIAL_fun([NotNull] mathParser.MULTINOMIAL_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MONTH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMONTH_fun([NotNull] mathParser.MONTH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>URLENCODE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitURLENCODE_fun([NotNull] mathParser.URLENCODE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NORMDIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNORMDIST_fun([NotNull] mathParser.NORMDIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HMACSHA1_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHMACSHA1_fun([NotNull] mathParser.HMACSHA1_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ENDSWITH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitENDSWITH_fun([NotNull] mathParser.ENDSWITH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>Bracket_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitBracket_fun([NotNull] mathParser.Bracket_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>BETADIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitBETADIST_fun([NotNull] mathParser.BETADIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ATANH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitATANH_fun([NotNull] mathParser.ATANH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NOW_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNOW_fun([NotNull] mathParser.NOW_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>IFNUMBER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitIFNUMBER_fun([NotNull] mathParser.IFNUMBER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MEDIAN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMEDIAN_fun([NotNull] mathParser.MEDIAN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>POWER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPOWER_fun([NotNull] mathParser.POWER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PROPER_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPROPER_fun([NotNull] mathParser.PROPER_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TRUNC_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTRUNC_fun([NotNull] mathParser.TRUNC_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>GCD_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGCD_fun([NotNull] mathParser.GCD_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TANH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTANH_fun([NotNull] mathParser.TANH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SINH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSINH_fun([NotNull] mathParser.SINH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SHA512_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSHA512_fun([NotNull] mathParser.SHA512_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MIN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMIN_fun([NotNull] mathParser.MIN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ABS_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitABS_fun([NotNull] mathParser.ABS_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ROUNDDOWN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitROUNDDOWN_fun([NotNull] mathParser.ROUNDDOWN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>IF_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitIF_fun([NotNull] mathParser.IF_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>JOIN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJOIN_fun([NotNull] mathParser.JOIN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FIND_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFIND_fun([NotNull] mathParser.FIND_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SUBSTITUTE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSUBSTITUTE_fun([NotNull] mathParser.SUBSTITUTE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>REPT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitREPT_fun([NotNull] mathParser.REPT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ASIN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitASIN_fun([NotNull] mathParser.ASIN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MulDiv_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMulDiv_fun([NotNull] mathParser.MulDiv_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>REMOVESTART_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitREMOVESTART_fun([NotNull] mathParser.REMOVESTART_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>T_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitT_fun([NotNull] mathParser.T_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>WEEKDAY_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitWEEKDAY_fun([NotNull] mathParser.WEEKDAY_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>BASE64TOTEXT_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitBASE64TOTEXT_fun([NotNull] mathParser.BASE64TOTEXT_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TDIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTDIST_fun([NotNull] mathParser.TDIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>DATEVALUE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDATEVALUE_fun([NotNull] mathParser.DATEVALUE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>STARTSWITH_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSTARTSWITH_fun([NotNull] mathParser.STARTSWITH_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>EVEN_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEVEN_fun([NotNull] mathParser.EVEN_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LOGNORMDIST_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLOGNORMDIST_fun([NotNull] mathParser.LOGNORMDIST_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ISNULLOREMPTY_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitISNULLOREMPTY_fun([NotNull] mathParser.ISNULLOREMPTY_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TRUE_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTRUE_fun([NotNull] mathParser.TRUE_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>FISHERINV_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitFISHERINV_fun([NotNull] mathParser.FISHERINV_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SHA1_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSHA1_fun([NotNull] mathParser.SHA1_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>TIME_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTIME_fun([NotNull] mathParser.TIME_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ATAN2_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitATAN2_fun([NotNull] mathParser.ATAN2_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>RAND_fun</c>
	/// labeled alternative in <see cref="mathParser.expr"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRAND_fun([NotNull] mathParser.RAND_funContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="mathParser.parameter"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitParameter([NotNull] mathParser.ParameterContext context) { return VisitChildren(context); }
}
